/*
  biblioteca básica de ZL.
  Para funcionar, hace falta que $in.$delta se actualice
  cada fotograma con el delta de tiempo entre fotograma y fotograma.
*/

/*
  ****************************************
  ********** Tiempo y fechas *************
  ****************************************
*/

Subrutina Primitiva Delta
Datos
  delta es Numero de salida
Algoritmo
	/*
  $salida.delta = $in.$delta/1000;
  */
Fin

Subrutina Primitiva año
Datos
  año es Numero de Salida
Algoritmo
  /*
  $salida.año = new Date().getFullYear();
  */
Fin

Subrutina Primitiva mes
Datos
  mes es Numero de Salida
Algoritmo
  /*
  $salida.mes = new Date().getMonth()+1;
  */
Fin

Subrutina Primitiva dia
Datos
  dia es Numero de Salida
Algoritmo
  /*
  $salida.dia = new Date().getDate();
  */
Fin

Subrutina Primitiva hora
Datos
  hora es Numero de Salida
Algoritmo
  /*
  $salida.hora = new Date().getHours();
  */
Fin

Subrutina Primitiva minuto
Datos
  minuto es Numero de Salida
Algoritmo
  /*
  $salida.minuto = new Date().getMinutes();
  */
Fin

Subrutina Primitiva segundo
Datos
  segundo es Numero de Salida
Algoritmo
  /*
  $salida.segundo = new Date().getSeconds();
  */
Fin

Subrutina Primitiva milisegundos
Datos
  milisegundos es Numero de Salida
Algoritmo
  /*
  //$salida.milisegundos = (new Date().getTime()) - startTime.getTime();
  */
Fin

/*
  ****************************************
  ************ Conversiones **************
  ****************************************
*/

Subrutina Conversora Primitiva NumeroComoTexto
Datos
  n es Numero de Entrada
  t es Texto de Salida
Algoritmo
  /*
  $salida.t = ""+$entrada.n;
  */
Fin

Subrutina Conversora Primitiva TextoComoNumero
Datos
	n es numero de salida
  t es texto de entrada
Algoritmo
  /*
  if (isNaN($entrada.t)) {
  	$in.$alError($in.$error.newError($in.$error.E_EJECUCION_CONVERSION_INVALIDA, {
    		tipoBase: "texto",
        tipoObjetivo: "numero",
       	valor: $entrada.t,
        adicional: "No es un número válido."
  		}));
  } else {
  	$salida.n = parseFloat($entrada.t);
  }
  */
Fin

/*
  ****************************************
  ************* Matemáticas **************
  ****************************************
*/

Subrutina Primitiva PI
Datos
  pi es Numero de salida
Algoritmo
  /*
  $salida.pi = Math.PI;
  */
Fin

Subrutina Primitiva E
Datos
  E es Numero de salida
Algoritmo
  /*
  $salida.e = Math.E;
  */
Fin

Subrutina Primitiva esEntero
Datos
  num es Numero de entrada
  resultado es booleano de Salida
Algoritmo
  /*
  $salida.resultado = ($entrada.num % 1 === 0);
  */
Fin

Subrutina Primitiva RedondearBajo
Datos
  numero es Numero de Entrada
  resultado es Numero de Salida
Algoritmo
  /*
  $salida.resultado = Math.floor($entrada.numero);
  */
Fin

Subrutina Primitiva RedondearAlto
Datos
  numero es Numero de Entrada
  resultado es Numero de Salida
Algoritmo
  /*
  $salida.resultado = Math.ceil($entrada.numero);
  */
Fin

Subrutina Primitiva Redondear
Datos
  numero es Numero de Entrada
  resultado es Numero de Salida
Algoritmo
  /*
  $salida.resultado = Math.round($entrada.numero);
  */
Fin

Subrutina Primitiva Seno
Datos
  numero es Numero de Entrada
  resultado es Numero de Salida
Algoritmo
  /*
  $salida.resultado = Math.sin($entrada.numero);
  */
Fin

Subrutina Primitiva Coseno
Datos
  numero es Numero de Entrada
  resultado es Numero de Salida
Algoritmo
  /*
  $salida.resultado = Math.cos($entrada.numero);
  */
Fin

Subrutina Primitiva Tangente
Datos
  numero es Numero de Entrada
  resultado es Numero de Salida
Algoritmo
  /*
  $salida.resultado = Math.tan($entrada.numero);
  */
Fin

Subrutina Primitiva ArcoSeno
Datos
  numero es Numero de Entrada
  resultado es Numero de Salida
Algoritmo
  /*
  $salida.resultado = Math.asin($entrada.numero);
  */
Fin

Subrutina Primitiva ArcoCoseno
Datos
  numero es Numero de Entrada
  resultado es Numero de Salida
Algoritmo
  /*
  $salida.resultado = Math.acos($entrada.numero);
  */
Fin

Subrutina Primitiva ArcoTangente
Datos
  numero es Numero de Entrada
  resultado es Numero de Salida
Algoritmo
  /*
  $salida.resultado = Math.atan($entrada.numero);
  */
Fin

Subrutina Primitiva RaizCuadrada
Datos
  numero es Numero de Entrada
  resultado es Numero de Salida
Algoritmo
  /*
  $salida.resultado = Math.sqrt($entrada.numero);
  */
Fin

Subrutina Primitiva Absoluto
Datos
  numero es Numero de Entrada
  resultado es Numero de Salida
Algoritmo
  /*
  $salida.resultado = Math.abs($entrada.numero);
  */
Fin

Subrutina Primitiva Logaritmo
Datos
  numero es Numero de Entrada
  resultado es Numero de Salida
Algoritmo
  /*
  $salida.resultado = Math.log($entrada.numero);
  */
Fin

Subrutina Primitiva Potencia
Datos
  base es Numero de Entrada
  exponente es Numero de Entrada
  resultado es Numero de Salida
Algoritmo
  /*
  $salida.resultado = Math.pow($entrada.base,$entrada.exponente);
  */
Fin
