Configuracion
  nombreModulo <- "basico"
  importar "bibliotecasZL/lista.zl"
Fin

/*
  biblioteca básica de ZL.
  Para funcionar, hace falta que $exterior.$delta se actualice
  cada fotograma con el delta de tiempo entre fotograma y fotograma.
*/

/*
  ****************************************
  ********** Entrada y Salida ************
  ****************************************
*/

Subrutina Primitiva Mostrar
Datos
  mensaje es Texto de Entrada
Algoritmo
  /*
  $exterior.$evento('escribir',$entrada.mensaje+"\n");
  */
Fin

Subrutina Primitiva MostrarLetra
Datos
  letra es Letra de Entrada
Algoritmo
  /*
  $exterior.$evento('escribir',$entrada.letra+"\n");
  */
Fin

Subrutina Primitiva MostrarNumero
Datos
  numero es Numero de Entrada
Algoritmo
  /*
  $exterior.$evento('escribir',$exterior.$precision($entrada.numero)+"\n");
  */
Fin

Subrutina Primitiva Asincrona Leer
Datos
  mensaje es Texto de Salida
Algoritmo
  /*
  console.log($exterior.$eventoasincrono);
  $salida.mensaje = await $exterior.$eventoasincrono('leer', {});
  */
Fin

Subrutina Primitiva Asincrona LeerNumero
Datos
  numero es Numero de Salida
Algoritmo
  /*
  let x;
  while (isNaN(x)) {
    const value = await $exterior.$eventoasincrono('leer', {});
    x = parseFloat(value);
  }
  $salida.numero = x;
  */
Fin

Subrutina Primitiva Limpiar
Datos

Algoritmo
  /*
  $exterior.$evento('limpiar');
  */
Fin

Subrutina Primitiva Aleatorio
Datos
  minimo es Numero de Entrada
  maximo es Numero de Entrada
  resultado es Numero de Salida
Algoritmo
  /*
  $salida.resultado = Math.round((Math.random() * ($entrada.maximo - $entrada.minimo)) + $entrada.minimo);
  */
Fin

Subrutina Primitiva AleatorioNormal
Datos
  media es Numero de entrada
  desviacionTipica es Numero de entrada
  resultado es Numero de salida
Algoritmo
  /*
  var u = 1 - Math.random(); // Subtraction to flip [0, 1) to (0, 1].
  var v = 1 - Math.random();
  $salida.resultado = $entrada.media + $entrada.desviaciontipica * Math.sqrt( -2.0 * Math.log( u ) ) * Math.cos( 2.0 * Math.PI * v );
  */
Fin

Subrutina Primitiva AleatorioExponencial
Datos
  lambda es Numero de entrada
  resultado es Numero de salida
Algoritmo
  /*
  $salida.resultado = Math.log(1-Math.random())/(-$entrada.lambda);
  */
Fin


/*
  ****************************************
  ********** Tiempo y fechas *************
  ****************************************
*/

Subrutina Primitiva Delta
Datos
  delta es Numero de salida
Algoritmo
	/*
  $salida.delta = $exterior.$evento('delta')/1000;
  */
Fin

Subrutina Primitiva año
Datos
  año es Numero de Salida
Algoritmo
  /*
  $salida.año = new Date().getFullYear();
  */
Fin

Subrutina Primitiva mes
Datos
  mes es Numero de Salida
Algoritmo
  /*
  $salida.mes = new Date().getMonth()+1;
  */
Fin

Subrutina Primitiva dia
Datos
  dia es Numero de Salida
Algoritmo
  /*
  $salida.dia = new Date().getDate();
  */
Fin

Subrutina Primitiva hora
Datos
  hora es Numero de Salida
Algoritmo
  /*
  $salida.hora = new Date().getHours();
  */
Fin

Subrutina Primitiva minuto
Datos
  minuto es Numero de Salida
Algoritmo
  /*
  $salida.minuto = new Date().getMinutes();
  */
Fin

Subrutina Primitiva segundo
Datos
  segundo es Numero de Salida
Algoritmo
  /*
  $salida.segundo = new Date().getSeconds();
  */
Fin

Subrutina Primitiva milisegundos
Datos
  milisegundos es Numero de Salida
Algoritmo
  /*
  $salida.milisegundos = (new Date().getTime()) - startTime.getTime();
  */
Fin

/*
  ****************************************
  ************ Conversiones **************
  ****************************************
*/

Subrutina Conversora Primitiva NumeroComoTexto
Datos
  n es Numero de Entrada
  t es Texto de Salida
Algoritmo
  /*
  $salida.t = ""+$entrada.n;
  */
Fin

Subrutina Conversora Primitiva TextoComoNumero
Datos
	n es numero de salida
  t es texto de entrada
Algoritmo
  /*
  if (isNaN($entrada.t)) {
  	$exterior.$error({
      error: 'E_EJECUCION_CONVERSION_INVALIDA',
      informacion: {
      		tipoBase: "texto",
          tipoObjetivo: "numero",
         	valor: $entrada.t,
          adicional: "No es un número válido."
    		}
    });
  } else {
  	$salida.n = parseFloat($entrada.t);
  }
  */
Fin

/*
  ****************************************
  ************* Matemáticas **************
  ****************************************
*/

Subrutina Primitiva PI
Datos
  pi es Numero de salida
Algoritmo
  /*
  $salida.pi = Math.PI;
  */
Fin

Subrutina Primitiva E
Datos
  E es Numero de salida
Algoritmo
  /*
  $salida.e = Math.E;
  */
Fin

Subrutina Primitiva esEntero
Datos
  num es Numero de entrada
  resultado es booleano de Salida
Algoritmo
  /*
  $salida.resultado = ($entrada.num % 1 === 0);
  */
Fin

Subrutina Primitiva RedondearBajo
Datos
  numero es Numero de Entrada
  resultado es Numero de Salida
Algoritmo
  /*
  $salida.resultado = Math.floor($entrada.numero);
  */
Fin

Subrutina Primitiva RedondearAlto
Datos
  numero es Numero de Entrada
  resultado es Numero de Salida
Algoritmo
  /*
  $salida.resultado = Math.ceil($entrada.numero);
  */
Fin

Subrutina Primitiva Redondear
Datos
  numero es Numero de Entrada
  resultado es Numero de Salida
Algoritmo
  /*
  $salida.resultado = Math.round($entrada.numero);
  */
Fin

Subrutina Primitiva Seno
Datos
  numero es Numero de Entrada
  resultado es Numero de Salida
Algoritmo
  /*
  $salida.resultado = Math.sin($entrada.numero);
  */
Fin

Subrutina Primitiva Coseno
Datos
  numero es Numero de Entrada
  resultado es Numero de Salida
Algoritmo
  /*
  $salida.resultado = Math.cos($entrada.numero);
  */
Fin

Subrutina Primitiva Tangente
Datos
  numero es Numero de Entrada
  resultado es Numero de Salida
Algoritmo
  /*
  $salida.resultado = Math.tan($entrada.numero);
  */
Fin

Subrutina Primitiva ArcoSeno
Datos
  numero es Numero de Entrada
  resultado es Numero de Salida
Algoritmo
  /*
  $salida.resultado = Math.asin($entrada.numero);
  */
Fin

Subrutina Primitiva ArcoCoseno
Datos
  numero es Numero de Entrada
  resultado es Numero de Salida
Algoritmo
  /*
  $salida.resultado = Math.acos($entrada.numero);
  */
Fin

Subrutina Primitiva ArcoTangente
Datos
  numero es Numero de Entrada
  resultado es Numero de Salida
Algoritmo
  /*
  $salida.resultado = Math.atan($entrada.numero);
  */
Fin

Subrutina Primitiva RaizCuadrada
Datos
  numero es Numero de Entrada
  resultado es Numero de Salida
Algoritmo
  /*
  $salida.resultado = Math.sqrt($entrada.numero);
  */
Fin

Subrutina Primitiva Absoluto
Datos
  numero es Numero de Entrada
  resultado es Numero de Salida
Algoritmo
  /*
  $salida.resultado = Math.abs($entrada.numero);
  */
Fin

Subrutina Primitiva Logaritmo
Datos
  numero es Numero de Entrada
  resultado es Numero de Salida
Algoritmo
  /*
  $salida.resultado = Math.log($entrada.numero);
  */
Fin

Subrutina Primitiva Potencia
Datos
  base es Numero de Entrada
  exponente es Numero de Entrada
  resultado es Numero de Salida
Algoritmo
  /*
  $salida.resultado = Math.pow($entrada.base,$entrada.exponente);
  */
Fin

/*
  ****************************************
  ************* Operaciones **************
  ****************************************
*/

Subrutina Primitiva OperadorAccesoLectura TextoAccesoLetra
Datos
  izquierda es Texto de Entrada
  derecha es Numero de Entrada
  resultado es Letra de Salida
Algoritmo
  /*
  $salida.resultado = $entrada.izquierda[$entrada.derecha-1];
  */
Fin

Subrutina Primitiva Conversora TextoAListaDeLetra
Datos
  t es Texto de Entrada
  l es Lista(Letra) de Salida
Algoritmo
  /*
  $salida.l.$miembros.v = $entrada.t.split('');
  */
Fin
