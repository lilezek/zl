Configuracion
  nombreModulo <- "punto"
  importar "bibliotecasZL/lista.zl"
Fin

/*
  biblioteca para la representación de un punto.
  No tiene dependencias.
  Un punto representa unas coordenadas bidimensionales.
*/

Subrutina Primitiva Inicio
Datos
  posx es Numero de Entrada
  px es Numero Global
  posy es Numero de Entrada
  py es Numero global
Algoritmo
  /*
  $self.$miembros.px = $entrada.posx;
  $self.$miembros.py = $entrada.posy;
  */
Fin

Subrutina Conversora Primitiva TextoComoPunto
Datos
  t es Texto de Entrada
  p es EsteModulo de Salida
Algoritmo
  /*
  var x = $entrada.t;
  var y = [0,0];
  if (x.indexOf(",") > -1) {
    y = x.split(",");
  } else if (x.indexOf(";") > -1) {
    y = x.split(";");
  }
  $salida.p.$miembros = {
    px: parseFloat(y[0]),
    py: parseFloat(y[1])
  }
  */
Fin

Subrutina Conversora Primitiva ListaComoPunto
Datos
  t es Lista(Numero) de Entrada
  p es EsteModulo de Salida
Algoritmo
  /*
  $salida.p.$miembros = {
    px: $entrada.t.$miembros.v[0],
    py: $entrada.t.$miembros.v[1]
  }
  */
Fin

Subrutina Primitiva LeerComponentes
Datos
  posx es Numero de salida
  px es Numero Global
  posy es Numero de salida
  py es Numero global
Algoritmo
  /*
  $salida.posx = $self.$miembros.px;
  $salida.posy = $self.$miembros.py;
  */
Fin

Subrutina Primitiva OperadorAccesoLectura PuntoLeerCoordenada
Datos
  izquierda es EsteModulo de Entrada
  derecha es Texto de entrada
  resultado es Numero de salida
Algoritmo
  /*
  if ($entrada.derecha === "x" || $entrada.derecha === "X") {
    $salida.resultado = $entrada.izquierda.$miembros.px;
  } else if ($entrada.derecha === "y" || $entrada.derecha === "Y") {
    $salida.resultado = $entrada.izquierda.$miembros.py;
  }
  //TODO: lanzar excepción
  */
Fin

Subrutina Primitiva OperadorSuma PuntoSumaPunto
Datos
  izquierda es EsteModulo de Entrada
  derecha es EsteModulo de Entrada
  resultado es EsteModulo de Salida
Algoritmo
  /*
  $salida.resultado.$miembros = {
    px: $entrada.izquierda.$miembros.px + $entrada.derecha.$miembros.px,
    py: $entrada.izquierda.$miembros.py + $entrada.derecha.$miembros.py
  }
  */
Fin

Subrutina Primitiva OperadorResta PuntoRestaPunto
Datos
  izquierda es EsteModulo de Entrada
  derecha es EsteModulo de Entrada
  resultado es EsteModulo de Salida
Algoritmo
  /*
  $salida.resultado.$miembros = {
    px: $entrada.izquierda.$miembros.px - $entrada.derecha.$miembros.px,
    py: $entrada.izquierda.$miembros.py - $entrada.derecha.$miembros.py
  }
  */
Fin

Subrutina Primitiva OperadorProducto PuntoProductoNumero
Datos
  izquierda es EsteModulo de Entrada
  derecha es Numero de Entrada
  resultado es EsteModulo de Salida
Algoritmo
  /*
  $salida.resultado.$miembros = {
    px: $entrada.izquierda.$miembros.px * $entrada.derecha,
    py: $entrada.izquierda.$miembros.py * $entrada.derecha
  }
  */
Fin

Subrutina Primitiva OperadorProducto NumeroProductoPunto
Datos
  izquierda es Numero de Entrada
  derecha es EsteModulo de Entrada
  resultado es EsteModulo de Salida
Algoritmo
  /*
  $salida.resultado.$miembros = {
    px: $entrada.derecha.$miembros.px * $entrada.izquierda,
    py: $entrada.derecha.$miembros.py * $entrada.izquierda
  }
  */
Fin
