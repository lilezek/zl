Configuracion
  importar "bibliotecasZL/color.zl"
  importar "bibliotecasZL/punto.zl"
  importar "bibliotecasZL/error.zl"
  nombreModulo <- "canvas"
Fin

/*
  Biblioteca de dibujado de ZL.
  Para funcionar, hace falta que el evento 'lienzo' devuelva un canvas HTML5.
  A ese canvas se le extraerá el contexto 2d.
*/

Subrutina Primitiva Preinicio
Datos

Algoritmo
  /*
  $entrada['$canvas'] = $exterior.$evento('lienzo', {});
  if (!$entrada['$canvas']) {
    $exterior.$error({
      error: 'E_EJECUCION_GENERICO_TEXTO',
      informacion: 'No se ha podido obtener el lienzo'
    });
  } else {
    $entrada['$ctx2d'] = $self.$canvas.getContext("2d");
  }
  $exterior.$evento('tamañolienzo', {
    ancho: $exterior.$principalPrototipo.$configuracion.ancho,
    alto: $exterior.$principalPrototipo.$configuracion.alto
  })
  */
Fin

Subrutina Primitiva Fondo
Datos
  fondo es Color de Entrada
Algoritmo
  /*
  $self.$ctx2d.fillStyle = "rgba("+~~$entrada.fondo.$miembros.r+","+~~$entrada.fondo.$miembros.g+","+~~$entrada.fondo.$miembros.b+ "," + $entrada.fondo.$miembros.a + ")";
  $self.$ctx2d.fillRect(0, 0, $self.$canvas.width, $self.$canvas.height);
  */
Fin

Subrutina Primitiva Elipse
Datos
  centro es Punto de Entrada
  ancho es Numero de Entrada
  alto es Numero de Entrada
Algoritmo
  /*
  var w = $entrada.ancho >= 0 ? $entrada.ancho : 0;
	var h = $entrada.alto >= 0 ? $entrada.alto : 0;
  var x = $entrada.centro.$miembros.px;
  var y = $entrada.centro.$miembros.py;
	$self.$ctx2d.beginPath();
	if (w == h) {
		$self.$ctx2d.arc(x,y,w / 2, 0, 6.283185307179586, false);
	} else {
		var w2 = w/2;
		var h2 = h/2;
		x -= w2;
		y -= h2;
		var kappa = 0.5522848,
		ox = (w2) * kappa, // control point offset horizontal
		oy = (h2) * kappa, // control point offset vertical
		xe = x + w,           // x-end
		ye = y + h,           // y-end
		xm = x + w2,       // x-middle
		ym = y + h2;       // y-middle

		$self.$ctx2d.moveTo(x, ym);
		$self.$ctx2d.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);
		$self.$ctx2d.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);
		$self.$ctx2d.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);
		$self.$ctx2d.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);
	}
	$self.$ctx2d.closePath();
  if ($self.$miembros.$estiloRelleno) {
    //$self.$ctx2d.globalAlpha = fillAlpha;
    $self.$ctx2d.fill();
  }
  if ($self.$miembros.$estiloBordes) {
    //$self.$ctx2d.globalAlpha = strokeAlpha;
    $self.$ctx2d.stroke();
  }
  */
Fin

Subrutina Primitiva rectangulo
Datos
  esquina es Punto de Entrada
  ancho es Numero de Entrada
  alto es Numero de Entrada
Algoritmo
  /*
  var w = $entrada.ancho >= 0 ? $entrada.ancho : 0;
  var h = $entrada.alto >= 0 ? $entrada.alto : 0;
  var x = $entrada.esquina.$miembros.px;
  var y = $entrada.esquina.$miembros.py;
  //if (lineWidth % 2 == 1) $self.$ctx2d.translate(0.5,0.5);
  $self.$ctx2d.beginPath();
  $self.$ctx2d.rect(x,y,w,h);
  $self.$ctx2d.closePath();
  if ($self.$miembros.$estiloRelleno) {
    //$self.$ctx2d.globalAlpha = fillAlpha;
    $self.$ctx2d.fill();
  }
  if ($self.$miembros.$estiloBordes) {
    //$self.$ctx2d.globalAlpha = strokeAlpha;
    $self.$ctx2d.stroke();
  }
  //if (lineWidth % 2 == 1) $self.$ctx2d.translate(-0.5,-0.5);
  */
Fin

Subrutina Primitiva colorRelleno
Datos
  relleno es Color de Entrada
Algoritmo
  /*
  $self.$ctx2d.fillStyle = "rgba("+~~$entrada.relleno.$miembros.r+","+~~$entrada.relleno.$miembros.g+","+~~$entrada.relleno.$miembros.b + "," + $entrada.relleno.$miembros.a + ")";
  $self.$miembros.$estiloRelleno = {
    r: $entrada.r,
    g: $entrada.g,
    b: $entrada.b
  };
  */
Fin

Subrutina Primitiva grosorBorde
Datos
	grosor es Numero de Entrada
Algoritmo
	/*
  $self.$miembros.$grosorLinea = $entrada.grosor >= 0 ? $entrada.grosor : 0;
	$self.$ctx2d.lineWidth = $self.$miembros.$grosorLinea;
  */
Fin

Subrutina Primitiva colorBorde
Datos
  borde es Color de Entrada
Algoritmo
  /*
	$self.$miembros.$estiloBordes = "rgba(" + $entrada.borde.$miembros.r + "," + $entrada.borde.$miembros.g + "," + $entrada.borde.$miembros.b + "," + $entrada.borde.$miembros.a + ")";
	$self.$ctx2d.strokeStyle = $self.$miembros.$estiloBordes;
	//strokeAlpha = parseFloat(a);
  */
Fin

Subrutina Primitiva SinRelleno
Datos

Algoritmo
	/*
  delete $self.$miembros.$estiloRelleno;
  */
Fin

Subrutina Primitiva SinBorde
Datos

Algoritmo
	/*
  delete $self.$miembros.$estiloBordes;
  */
Fin

Subrutina Primitiva PosicionRaton
Datos
	posicion es Punto de Salida
Algoritmo
	/*
  var p = $exterior.$evento('posicionraton', {});
  $salida.posicion.$miembros = {
  	px: p[0],
    py: p[1]
  }
  */
Fin

Subrutina Primitiva EsconderRaton
Datos

Algoritmo
	/*
  var c = document.getElementById("canvas");
  c.style.cursor = "none";
  */
Fin

Subrutina Primitiva Linea
Datos
  principio es Punto de Entrada
  final es Punto de Entrada
Algoritmo
	/*
  var ctx = $self.$ctx2d;
  ctx.beginPath();
  ctx.moveTo($entrada.principio.$miembros.px, $entrada.principio.$miembros.py);
  ctx.lineTo($entrada.final.$miembros.px, $entrada.final.$miembros.py);
  ctx.closePath();
  if ($self.$miembros.$estiloBordes) {
    //ctx.globalAlpha = strokeAlpha;
    ctx.stroke();
  }
  */
Fin

Subrutina Primitiva DibujarPunto
Datos
  punto es Punto de Entrada
Algoritmo
  /*
  if ($self.$miembros.$estiloBordes){
    $self.$ctx2d.beginPath();
    $self.$ctx2d.fillStyle = $self.$miembros.$estiloBordes;
    $self.$ctx2d.arc($entrada.punto.$miembros.px, $entrada.punto.$miembros.py, $self.$miembros.$grosorLinea / 2, 0, 6.283185307179586, false);
    $self.$ctx2d.fill();
    $self.$ctx2d.fillStyle = $self.$miembros.$estiloRelleno;
    $self.$ctx2d.closePath();
  }
  */
Fin

Subrutina Primitiva Triangulo
Datos
  punto1 es Punto de Entrada
  punto2 es Punto de Entrada
  punto3 es Punto de Entrada
Algoritmo
  /*
  $self.$ctx2d.beginPath();
  $self.$ctx2d.moveTo($entrada.punto1.$miembros.px,$entrada.punto1.$miembros.py);
  $self.$ctx2d.lineTo($entrada.punto2.$miembros.px,$entrada.punto2.$miembros.py);
  $self.$ctx2d.lineTo($entrada.punto3.$miembros.px,$entrada.punto3.$miembros.py);
  $self.$ctx2d.lineTo($entrada.punto1.$miembros.px,$entrada.punto1.$miembros.py);
  $self.$ctx2d.closePath();
  if ($self.$miembros.$estiloRelleno !== null) {
    //$self.$ctx2d.globalAlpha = fillAlpha;
    $self.$ctx2d.fill();
  }
  if ($self.$miembros.$estiloBordes !== null) {
    //$self.$ctx2d.globalAlpha = strokeAlpha;
    $self.$ctx2d.stroke();
  }
  */
Fin

Subrutina Primitiva DibujarTexto
Datos
  mensaje es Texto de Entrada
  centro es Punto de Entrada
Algoritmo
  /*
  if ($self.$miembros.$estiloRelleno !== null) {
    //$self.$ctx2d.globalAlpha = fillAlpha;
    $self.$ctx2d.fillText($entrada.mensaje,$entrada.centro.$miembros.px,$entrada.centro.$miembros.py);
  }
  */
Fin

Subrutina Primitiva CalcularAnchoTexto
Datos
  texto es Texto de Entrada
  ancho es Numero de Salida
Algoritmo
  /*
  $salida.ancho = $self.$ctx2d.measureText($entrada.texto).width;
  */
Fin

Subrutina Primitiva TamañoFuenteTexto
Datos
  tamaño es Numero de Entrada
Algoritmo
  /*
  $self.$ctx2d.font = $self.$miembros.$estiloFuente = "normal "+$entrada.tamaño+"pt arial";
  */
Fin

Subrutina Primitiva Asincrona CargarImagen
Datos
  url es Texto de Entrada
  error es Error de Salida
Algoritmo
  /*
  await new Promise((res, rej) => {
    $self.$miembros.$cacheDeImagenes = $self.$miembros.$cacheDeImagenes || {};
    var img = new Image();
    img.onload = function() {
      $self.$miembros.$cacheDeImagenes[$entrada.url] = img;
      $salida.error.inicio({mensaje: ""});          
      res();
    }
    img.onerror = function(e) {
      // $exterior.$error({
      //   error: 'E_EJECUCION_IMAGEN_NO_CARGA',
      //   informacion: {
      //     url: $entrada.url,
      //     motivo: e,
      //     adicional: "No se pudo cargar la imagen."
      //   }
      // });
      // rej(e);
      $salida.error.inicio({mensaje: "No se pudo cargar la imagen '"+$entrada.url+"'"});      
      res();
    }
    img.src = $entrada.url;
  })
  */
Fin

Subrutina Primitiva DibujarImagen
Datos
  url es Texto de Entrada
  esquina es Punto de Entrada
  ancho es Numero de Entrada
  alto es Numero de Entrada
Algoritmo
  /*
  var img = $self.$miembros.$cacheDeImagenes[$entrada.url];
  $self.$ctx2d.drawImage(img, $entrada.esquina.$miembros.px, $entrada.esquina.$miembros.py, $entrada.ancho, $entrada.alto);
  */
Fin

Subrutina Primitiva Dimensiones
Datos
  ancho es Numero de Salida
  alto es Numero de Salida
Algoritmo
  /*
  $salida.ancho = window.innerWidth;
  $salida.alto = window.innerHeight;
  */
Fin
