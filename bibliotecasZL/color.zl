Configuracion
  nombreModulo <- "color"
  integrar "bibliotecasZL/basico.zl"
Fin

Subrutina Primitiva Inicio
Datos
  rojo es Numero de Entrada
  verde es Numero de Entrada
  azul es Numero de Entrada
  opacidad es Numero de Entrada
  r es Numero Global
  g es Numero Global
  b es Numero Global
  a es Numero Global
Algoritmo
  /*
  this.$miembros.r = $entrada.rojo;
  this.$miembros.g = $entrada.verde;
  this.$miembros.b = $entrada.azul;
  if ($entrada.opacidad <= 1) {
    this.$miembros.a = $entrada.opacidad;
  } else {
    this.$miembros.a = $entrada.opacidad / 0xFF;
  }
  */
Fin

Subrutina Conversora Primitiva TextoComoColor
Datos
  t es Texto de Entrada
  c es EsteModulo de Salida
Algoritmo
  /*
  $salida.c = new $exterior.color($exterior);
  var x = $entrada.t.toLowerCase();
  if (x in $exterior.$colores) {
    $salida.c.inicio({
      rojo: $exterior.$colores[x].r,
      verde: $exterior.$colores[x].g,
      azul: $exterior.$colores[x].b,
      opacidad: 1
    });
  } else if ((x + " 1") in $exterior.$colores) {
    x = x + " 1";
    $salida.c.inicio({
      rojo: $exterior.$colores[x].r,
      verde: $exterior.$colores[x].g,
      azul: $exterior.$colores[x].b,
      opacidad: 1
    });
  }
  */
Fin

Subrutina Conversora Primitiva NumeroComoColor
Datos
  n es Numero de Entrada
  c es EsteModulo de Salida
Algoritmo
  /*
  $salida.c = $out.instancia();
  $salida.c.inicio({
    rojo: ($entrada.n & 0xFF000000) >> 24,
    verde: ($entrada.n & 0xFF0000) >> 16,
    azul: ($entrada.n & 0xFF00) >> 8,
    opacidad: ($entrada.n & 0xFF) / 0xFF
  });
  */
Fin
